import{_ as a,c as t,a2 as o,o as r}from"./chunks/framework.DOgdC_ou.js";const _=JSON.parse('{"title":"排序数组中查找数字","description":"","frontmatter":{"title":"排序数组中查找数字","lastUpdated":true},"headers":[],"relativePath":"developer/algorithms/排序数组中查找数字.md","filePath":"developer/algorithms/排序数组中查找数字.md","lastUpdated":1729515322000}'),d={name:"developer/algorithms/排序数组中查找数字.md"};function l(i,e,n,s,c,h){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="排序数组中查找数字" tabindex="-1">排序数组中查找数字 <a class="header-anchor" href="#排序数组中查找数字" aria-label="Permalink to &quot;排序数组中查找数字&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>统计一个数字在一个排序数组中出现的次数</p><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><p>思路一：双指针，既然是有序，那就找到第一个和最后一个，然后计算之间有几个，时间复杂度 <code>O(n)</code> 思路二：二分查找，找到目标值，然后向前向后遍历，时间复杂度 <code>O(n)</code> 思路三：二分查找，找到第一个和最后一个，时间复杂度 <code>O(logn)</code></p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2>',6)]))}const m=a(d,[["render",l]]);export{_ as __pageData,m as default};
