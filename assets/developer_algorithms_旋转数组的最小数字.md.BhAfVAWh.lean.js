import{_ as e,c as t,a2 as r,o}from"./chunks/framework.DOgdC_ou.js";const m=JSON.parse('{"title":"旋转数组的最小数字","description":"","frontmatter":{"title":"旋转数组的最小数字","lastUpdated":true},"headers":[],"relativePath":"developer/algorithms/旋转数组的最小数字.md","filePath":"developer/algorithms/旋转数组的最小数字.md","lastUpdated":1729515322000}'),i={name:"developer/algorithms/旋转数组的最小数字.md"};function d(l,a,h,s,n,c){return o(),t("div",null,a[0]||(a[0]=[r('<h1 id="旋转数组的最小数字" tabindex="-1">旋转数组的最小数字 <a class="header-anchor" href="#旋转数组的最小数字" aria-label="Permalink to &quot;旋转数组的最小数字&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。例如数组 <code>[3, 4, 5, 1, 2]</code> 为 <code>[1, 2, 3, 4, 5]</code> 的一个旋转，该数组最小值为 1</p><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><p>思路一：既然是非减排序的旋转，那直接找最大值，或者最小值</p><p>二分查找拼接点 mid = a.length -1 high = 0 a[mid] &gt; a[high] 拼接点在右侧 a[mid] &lt; a[high] 拼接点在左侧 a[mid] === a[high] 则需要一个一个尝试</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2>',7)]))}const _=e(i,[["render",d]]);export{m as __pageData,_ as default};
