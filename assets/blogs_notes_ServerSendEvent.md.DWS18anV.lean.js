import{_ as t,c as a,a2 as r,o as n}from"./chunks/framework.DOgdC_ou.js";const h=JSON.parse('{"title":"Server-Sent Event","description":"","frontmatter":{"title":"Server-Sent Event","lastUpdated":true},"headers":[],"relativePath":"blogs/notes/ServerSendEvent.md","filePath":"blogs/notes/ServerSendEvent.md","lastUpdated":1729515322000}'),o={name:"blogs/notes/ServerSendEvent.md"};function l(s,e,S,i,c,d){return n(),a("div",null,e[0]||(e[0]=[r('<h1 id="server-sent-event" tabindex="-1">Server-Sent Event <a class="header-anchor" href="#server-sent-event" aria-label="Permalink to &quot;Server-Sent Event&quot;">​</a></h1><h2 id="sse-对比-websocket" tabindex="-1">SSE 对比 WebSocket <a class="header-anchor" href="#sse-对比-websocket" aria-label="Permalink to &quot;SSE 对比 WebSocket&quot;">​</a></h2><ul><li>SSE 使用 HTTP 协议，现有的服务器软件都支持；WebSocket 是一个独立协议</li><li>SSE 属于轻量级，使用简单；WebSocket 协议相对复杂</li><li>SSE 是单向通道，只能服务端发往浏览器，本质上是流信息下载；WebSocket 是全双工通道</li><li>SSE 默认支持断线重连；WebSocket 需要自己实现</li><li>SSE 一般只用来传送文本，二进制需要编码后传送；WebSocket 默认支持二进制数据</li><li>SSE 支持自定义发送的消息类型</li></ul><h2 id="http2-主动推送数据的原理和实现" tabindex="-1">http2 主动推送数据的原理和实现 <a class="header-anchor" href="#http2-主动推送数据的原理和实现" aria-label="Permalink to &quot;http2 主动推送数据的原理和实现&quot;">​</a></h2>',4)]))}const b=t(o,[["render",l]]);export{h as __pageData,b as default};
