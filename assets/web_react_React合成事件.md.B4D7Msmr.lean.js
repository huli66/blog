import{_ as t,c as a,a2 as r,o as c}from"./chunks/framework.DOgdC_ou.js";const h=JSON.parse('{"title":"React合成事件","description":"","frontmatter":{"title":"React合成事件","lastUpdated":true},"headers":[],"relativePath":"web/react/React合成事件.md","filePath":"web/react/React合成事件.md","lastUpdated":1729515322000}'),o={name:"web/react/React合成事件.md"};function l(p,e,n,i,s,d){return c(),a("div",null,e[0]||(e[0]=[r('<h1 id="react-合成事件" tabindex="-1">React 合成事件 <a class="header-anchor" href="#react-合成事件" aria-label="Permalink to &quot;React 合成事件&quot;">​</a></h1><p>React 事件系统的大致原理分为三步</p><p>1.在 createRoot 的时候挂载所有支持的原生事件 （React 18.1.0 中 react-dom/src/ReactDOMRoot.js 文件中 createRoot 函数，执行完 createContainer 之后执行 listenToAllSupportedEvents，原理就是监听挂载容器上所有原生事件，原生事件触发后 dispatch 对应的事件）</p><p>2.dispatch 过程</p><ul><li><p>通过参数把事件 e 传递进来，触发事件的真实 DOM 就是 e.target，然后收集 e.target 到 container 之间的 捕获和冒泡事件</p></li><li><p>构造一个合成事件，里面有一个是否阻止冒泡的属性，阻止冒泡方法就直接调用原生的</p></li><li><p>捕获事件数组挨个执行</p></li><li><p>冒泡事件数组挨个执行</p></li></ul><p>这里要注意事件执行顺序：先执行捕获事件，再执行冒泡事件，捕获从外层往内层执行，冒泡从内层往外层</p><p>3.在 mount 和 update 过程中添加和更新保存事件回调函数的属性，在 DOM 的一个属性上保存所有回调函数比如 onClick onClickCapture</p><h2 id="有个坑" tabindex="-1">有个坑 <a class="header-anchor" href="#有个坑" aria-label="Permalink to &quot;有个坑&quot;">​</a></h2><p>在 Chrome 上 console.log 输出 e.target 和 e.currentTarget 都有结果，但是直接 console.log(e) 打印结果里面 e 的 currentTarget 值显示 null</p>',9)]))}const m=t(o,[["render",l]]);export{h as __pageData,m as default};
