import{_ as e,c as t,a2 as o,o as r}from"./chunks/framework.DOgdC_ou.js";const p=JSON.parse('{"title":"本站历史","description":"","frontmatter":{"title":"本站历史","lastUpdated":true},"headers":[],"relativePath":"about/站点历史.md","filePath":"about/站点历史.md","lastUpdated":1729515322000}'),i={name:"about/站点历史.md"};function l(n,a,d,s,c,h){return r(),t("div",null,a[0]||(a[0]=[o('<h1 id="about" tabindex="-1">About <a class="header-anchor" href="#about" aria-label="Permalink to &quot;About&quot;">​</a></h1><h2 id="过往" tabindex="-1">过往 <a class="header-anchor" href="#过往" aria-label="Permalink to &quot;过往&quot;">​</a></h2><ul><li><p>2018 年最开始用 Hexo 搭建</p></li><li><p>2021 年采用 React + Next.js 搭建的服务端渲染博客，所有项目和文档在同一个项目</p></li><li><p>2021 年底，进行了又一次重构，由 前端 + 服务端 + 文档 三个项目组成</p><ul><li>文档项目 - 所有 markdown 文档发布到一个 git 仓库中 设置 GitHub Action 每次推送代码后进入云服务器执行拉代码脚本（或者直接打包复制到指定目录） 该目录映射后端读取文档的目录</li><li>服务端：TypeScript + Express 通过 Docker node 容器在云服务器运行 读取指定目录所有文件，返回内容</li><li>前端：React 通过 Docker nginx 容器部署到云服务器</li></ul></li></ul><h2 id="项目结构和技术栈" tabindex="-1">项目结构和技术栈 <a class="header-anchor" href="#项目结构和技术栈" aria-label="Permalink to &quot;项目结构和技术栈&quot;">​</a></h2><p>上一个版本实践下来，感觉实践过程中对运维知识提升倒是不少，但是现在还是觉得返璞归真才是王道，采用了简单的 <code>vite-press</code> 搭建，部署到 Github Page 上</p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="个人组件库" tabindex="-1">个人组件库 <a class="header-anchor" href="#个人组件库" aria-label="Permalink to &quot;个人组件库&quot;">​</a></h3><h3 id="个人工具库" tabindex="-1">个人工具库 <a class="header-anchor" href="#个人工具库" aria-label="Permalink to &quot;个人工具库&quot;">​</a></h3>',8)]))}const b=e(i,[["render",l]]);export{p as __pageData,b as default};
