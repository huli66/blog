import{_ as s,c as a,o as n,d as e}from"./app.67d5c5e8.js";const u=JSON.parse('{"title":"JSON","description":"","frontmatter":{"title":"JSON","lastUpdated":true},"headers":[{"level":2,"title":"1.语法","slug":"_1-语法","link":"#_1-语法","children":[]},{"level":2,"title":"2.解析与序列化","slug":"_2-解析与序列化","link":"#_2-解析与序列化","children":[{"level":3,"title":"JSON.stringify()","slug":"json-stringify","link":"#json-stringify","children":[]},{"level":3,"title":"JSON.parse()","slug":"json-parse","link":"#json-parse","children":[]}]}],"relativePath":"books/JavaScript高级程序设计/23JSON.md","lastUpdated":1691140911000}'),l={name:"books/JavaScript高级程序设计/23JSON.md"},p=e(`<h1 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-hidden="true">#</a></h1><p>::: JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级数据格式，可以方便地展示复杂数据结构，这个格式使用 JavaScript 语法的一个严格子集表示 <strong>对象、数组、字符串、数值、布尔值和 null</strong> :::</p><p>JSON 不属于 JavaScript，只是拥有相同的语法而已，是一种通用的数据格式，很多语言拥有解析和序列化 JSON 的内置能力</p><h2 id="_1-语法" tabindex="-1">1.语法 <a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a></h2><ul><li>简单值: <code>string</code> <code>number</code> <code>boolean</code> <code>null</code> 都可以出现在 JSON 中，特殊值 <code>undefined</code> 不可以</li><li>对象: 有序键值对，每个值都可以是简单值或者复杂类型</li><li>数组: 可以通过数值索引访问的值的有序列表</li></ul><p>JSON 没有变量、函数或对象实例的概念</p><p><strong>JSON 字符串和 JavaScript 字符串的主要区别是，JSON 字符串必须使用双引号，单引号会导致语法错误</strong></p><p><strong>JSON 中的对象必须使用双引号把属性名包起来（JS 对象可以省略）</strong></p><p>下面代码中每一行都可以是一个有效 JSON ，但是 <strong>每个 JSON 或者 JSON 文件都只能保护一个值，包含多个会报错，并且 JSON 中不能包含注释（比如 package.json 中就不能注释），不需要分号</strong></p><div class="language-JSON"><button title="Copy Code" class="copy"></button><span class="lang">JSON</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-解析与序列化" tabindex="-1">2.解析与序列化 <a class="header-anchor" href="#_2-解析与序列化" aria-hidden="true">#</a></h2><p>早期可以用 <code>eval()</code> 解析解释 JSON，ECMAScript 5 增加了 JSON 全局对象，正式引入了解析 JSON 的内置能力 JSON 对象有两个方法: <code>stringify</code> 和 <code>parse</code></p><h3 id="json-stringify" tabindex="-1">JSON.stringify() <a class="header-anchor" href="#json-stringify" aria-hidden="true">#</a></h3><p>用于将 JavaScript 序列化为 JSON 字符串，默认没有缩进，可以传入一到三个参数</p><p><strong>在序列化 JavaScript 对象时，所有函数和原型成员都会被有意地在结果中省略，值为 undefined 的任何属性也会被跳过</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre></div><p>第二个参数是过滤器，可以是一个数组也可以是一个过滤函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre></div><p>第三个参数是控制缩进的 传入数值则代表缩进空格个数，最大是 10 ，超出自动设置为 10 传入字符串则代表以该字符串缩进，字符串长度最大为 10 ，超出则自动截断 <strong>为了方便阅读，还会对所有有效缩进插入换行</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre></div><p>toJSON() 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre></div><p>:::JSON.stringify() 执行过程</p><p>:::</p><h3 id="json-parse" tabindex="-1">JSON.parse() <a class="header-anchor" href="#json-parse" aria-hidden="true">#</a></h3><p>用于将 JSON 字符串解析为原生 JavaScript ，传入无效值会抛出错误</p><p>可以额外接收第二个参数，区别于 JSON.stringify() 的过滤函数，可以称之为还原函数，实际上它们的格式完全一样 还原函数接收两个参数，key 和 value ，也需要返回值，返回 undefined 则结果中删除相应的 key ，返回其他值则插入到结果中，还原函数常用于把日期字符串转换为 Date 对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre></div><p>fs 读取 JSON 文件的结果是什么，是一个字符串吗</p>`,29),t=[p];function i(o,c,r,d,h,g){return n(),a("div",null,t)}const J=s(l,[["render",i]]);export{u as __pageData,J as default};
