import{_ as i,c as e,a2 as t,o as a}from"./chunks/framework.DOgdC_ou.js";const c=JSON.parse('{"title":"网络篇","description":"","frontmatter":{"title":"网络篇","lastUpdated":true},"headers":[],"relativePath":"blogs/problems/网络面试题.md","filePath":"blogs/problems/网络面试题.md","lastUpdated":1729515322000}'),o={name:"blogs/problems/网络面试题.md"};function r(u,l,n,s,h,p){return a(),e("div",null,l[0]||(l[0]=[t('<h1 id="网络篇" tabindex="-1">网络篇 <a class="header-anchor" href="#网络篇" aria-label="Permalink to &quot;网络篇&quot;">​</a></h1><h2 id="浏览器输入-url-后的过程" tabindex="-1">浏览器输入 url 后的过程 <a class="header-anchor" href="#浏览器输入-url-后的过程" aria-label="Permalink to &quot;浏览器输入 url 后的过程&quot;">​</a></h2><ol start="0"><li>先判断 http 请求是否有缓存，如果有强制缓存 通过 Expires 和 Cache-Control：max-age 判断是否过期，没有则直接使用，同时存在则被 Cache-Control：max-age 覆盖 缓存发生时间在哪，返回 200 或者 304，200 则响应请求，304 读取本地缓存，如果是 200 或者没有缓存则进行下一步，缓存判断和 DNS 解析并没有严格的先后顺序，可以是并行的</li><li>URL 解析，DNS 查询（包括浏览器本地缓存、系统集成缓存、根域名服务器查询、顶级域名服务器查询、权威域名服务器查询） 2.三次握手，两次不够安全，四次浪费资源</li></ol><ul><li>SYN（synchronize）同步</li><li>ACK + SYN 确认同步和请求同步</li><li>ACK（acknowledge）确认 3.服务器处理并返回 5.渲染页面</li><li>HTML 解析，生成 DOM 树</li><li>CSS 解析生成 CSS 树</li><li>DOM 树和 CSS 规则书生成渲染树，layout 布局，根据计算好的信息绘制页面，合并渲染层 <ul><li>重绘：只改变颜色边框颜色背景色等 Repaint</li><li>回流：改变尺寸、字体，内容等</li></ul></li><li>如果有 script 会判断是否含有 defer 和 async 属性，如果有，会异步下载资源，如果没有，则暂停 DOM 解析（GUI 线程停止），去加载 js 资源并执行（期间阻塞页面渲染） 6.关闭 TCP 连接</li><li>四次挥手，全双工，需要双方都分别释放对方的连接 <ul><li>通知发送完了，确认发送完了</li><li>同时接收完了，确认接收完了</li></ul></li><li>根据 http 协议设置</li><li>关闭连接和渲染页面是相对独立的，可能同时发生</li><li>会等待 2MSL（Maximum Segment Lifetime) 报文在网络中允许存活的最长时间（win 一般是 2min，死去的计算机网络知识开始攻击我），根据操作系统不同有所区别</li></ul><h2 id="cors-跨域问题" tabindex="-1">cors 跨域问题 <a class="header-anchor" href="#cors-跨域问题" aria-label="Permalink to &quot;cors 跨域问题&quot;">​</a></h2><p>Cross-Origin Resource Sharing 跨域资源共享</p><ul><li>同源策略：浏览器限制来自不同源的 js 代码对页面的访问，这是为了防止潜在的安全风险，也导致了跨域请求的问题</li><li>CORS：跨域资源共享，为了解决跨域问题，允许服务器声明哪些域有权访问其资源 <ul><li>Access-Control-Allow-Origin：具体设置域或者通配符，或者服务器接收到请求后设置为来源域</li><li>Access-Control-Allow-Methods：限制哪些 HTTP 方法可以跨域请求</li><li>Access-Control-Allow-Headers：指定跨域请求允许的 HTTP 头字段</li></ul></li><li>预检请求：OPTIONS <ul><li>简单请求：只支持 get 和 post，没有自定义的请求头，Content-Type 限制为 application/x-www-form-urlencoded、multipart/form-data、text/plain，简单请求直接发送请求并带上 Origin 头部</li><li>非简单请求，会在正式请求前发送一次预检请求（options），如果服务器不允许就会报跨域错误，新版 Chrome 浏览器看不到 options 请求， 参考： <a href="https://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noreferrer">阮一峰</a> 阮一峰 其他方法解决跨域问题：</li></ul></li><li>JSONP 只支持 GET 请求，可以支持老版本浏览器</li><li>postmessage</li><li>websocket</li><li>设置代理，代理到允许跨域的服务器（相当于不直接支持，但是间接支持） Websocket 全双工，没有跨域问题，比接口轮询更节省时间，轮询需要不断建立 TCP 连接，严重浪费资源（四次挥手后等待时间也算资源） 缺点是不稳定，需要建立心跳机制，断开会自动重连 WebSocket 协议的建立通常是始于一个 HTTP 握手，头部包括 Upgrade 字段，请求服务器将连接协议切换到 WebSocket，如果服务器支持 WebSocket 并且同意进行协议切换，会回复 101 代表切换成功 替代方案</li><li>长轮询：保持一个 http 请求长时间，开销大延迟高</li><li>短轮询：就是不断发送请求，需要不断建立 TCP 连接，浪费资源，而且浏览器有限制，每个 TCP 断开后还需要等待 <ul><li>每种浏览器对同一域名同时的并发连接数限制不同，chrome 默认限制 6 个，只限制活跃中的，四次挥手后还在等待的是处于关闭过程中的，不会计入</li></ul></li><li>Server-Sent Events（SSE）：服务器端单向通信，基于 HTTP 协议的，简单事件流）</li><li>gRPC：一般主要用于服务间通信</li><li>webRTC：主要用于浏览器点对点通信 100 Continue 服务器已经接收到请求的初始部分，客户端应该继续发送剩余部分</li></ul><h2 id="tcp-和-udp" tabindex="-1">TCP 和 UDP <a class="header-anchor" href="#tcp-和-udp" aria-label="Permalink to &quot;TCP 和 UDP&quot;">​</a></h2><ul><li><p>TCP</p><ul><li>需要建立连接</li><li>面向字节流</li><li>可靠通信（会确认内容全部发送和收到，丢失重传）</li><li>头部 20bytes</li></ul></li><li><p>UDP</p><ul><li>不需要建立连接</li><li>报文通信</li><li>没有流控制，不管接收方收到多少，可能会造成拥塞</li><li>头部 8bytes</li></ul></li><li><p>keep-alive</p><ul><li>持久连接，通过重用一个 TCP 连接来发送、接收多个 HTTP 请求，来减少创建、关闭 TCP 连接的开销</li><li>HTTP1.0 中，非 keep-alive 模式下，每次请求都有新建 TCP 请求，结束后销毁，效率低</li><li>HTTP1.1 中，默认开启 keep-alive，可以看到请求头 Connection: keep-alive</li><li>持久连接采用阻塞模式，下次请求必须等待上次响应返回后才能发起，否则一直等待（线头阻塞，http2 解决了这个问题）</li></ul></li></ul><p>状态码</p><ul><li>1xx 信息类 <ul><li>100 Continue 服务器已经接收到请求的初始部分，客户端应该继续发送剩余部分</li><li>101 Switching Protocols： 切换协议</li></ul></li><li>2xx 成功类 <ul><li>200 OK</li><li>201 Created：请求已成功，并在服务器创建新资源</li><li>204 No Content：服务器成功处理了请求，但是没有返回任何内容</li></ul></li><li>3xx 重定向类 <ul><li>301 Moved Permanently：资源被永久重定向</li><li>302 Found 临时重定向</li><li>304 Not Modified 资源未被修改，可以使用缓存</li></ul></li><li>4xx 客户端错误 <ul><li>400 Bad Request 服务器无法理解请求的语法</li><li>401 Unauthorized 要求身份验证</li><li>403 Forbidden 服务器拒绝请求</li><li>404 Not Found 找不到请求资源</li></ul></li><li>5xx 服务端错误 <ul><li>500 Internal Server Error 服务器遇到错误，无法完成请求</li><li>502 Bad Gateway 网关或代理服务器收到了无效请求</li><li>503 Service Unavailable 服务器暂时无法处理请求</li></ul></li></ul><h2 id="http-1-x-2-x-3-x" tabindex="-1">HTTP 1.x 2.x 3.x <a class="header-anchor" href="#http-1-x-2-x-3-x" aria-label="Permalink to &quot;HTTP 1.x 2.x 3.x&quot;">​</a></h2><p>参考：http2 http3 思否</p><ul><li>OSI （Open System Interconnection Model）开放系统网络连接模型 <ul><li>应用层</li><li>表示层：设备固有的数据格式和网络的标准数据格式的转换</li><li>会话层：负责建立和断开通信连接</li><li>传输层：端口到端口的通信</li><li>网络层：主机到主机的通信</li><li>数据链路层：规定 0、1 的解读方式</li><li>物理层：电信号</li></ul></li><li>TCP/IP 模型，是实际互联网采用的模型，更为简化，可以分为四层或者五层 <ul><li>应用层：对应 OSI 模型中的应用层、表示层、会话层，对应 http、ssh、ftp 等协议</li><li>传输层：TCP、UPD 等</li><li>网络层：IP 协议</li><li>数据链路层：以太网</li><li>物理层：线路、光纤等</li></ul></li></ul><h3 id="http-1-x-安全不足、性能不高" tabindex="-1">HTTP/1.x 安全不足、性能不高 <a class="header-anchor" href="#http-1-x-安全不足、性能不高" aria-label="Permalink to &quot;HTTP/1.x 安全不足、性能不高&quot;">​</a></h3><ul><li>高延迟--带来页面加载速度降低，由于队头阻塞，导致带宽无法充分利用（每个活跃 TCP 连接同一时刻只能处理一个请求）</li><li>无状态特性 -- 带来巨大的 HTTP 头部，因为无状态，所以很多信息靠头部来传输，内容巨大且很多字段每次都重复</li><li>报文明文传输 -- 不安全</li><li>不支持服务器推送消息</li><li>1.0 默认是短连接，1.1 默认是持久化连接</li><li>缺陷 <ul><li>连接无法复用</li><li>线头阻塞</li><li>协议头开销大</li><li>安全问题</li></ul></li></ul><h3 id="http-2-x" tabindex="-1">HTTP/2.x <a class="header-anchor" href="#http-2-x" aria-label="Permalink to &quot;HTTP/2.x&quot;">​</a></h3><ul><li>基于 Google 的 SPDY 协议</li><li>二进制传输和 Header 压缩两点导致需要传递的数据量减少 <ul><li>二进制传输，多个请求的多个帧乱序发送，根据帧首部的流标识重新组装</li><li>Header 压缩：HPACK 算法压缩客户端和服务器共同更新首部键值对表</li></ul></li><li>多路复用： <ul><li>同一个域名只占用一个 TCP 连接，整个页面资源下载过程中只有第一次慢启动</li><li>还带有优先级标志</li></ul></li><li>Server Push：服务器主动推送，比如浏览器请求 HTML 时，服务器主动推送可能用到的 JS 和 CSS 文件（客户端需要同意接收），减少等待时间，否则正常情况下浏览器要发送三次请求</li><li>主流浏览器都公开宣布只支持加密的 HTTP/2 ，所以事实上 HTTP/2 都是跑在 TLS 上</li><li>缺陷 <ul><li>建立连接时间长：使用 TLS 协议进行安全传输还是会有四次握手过程的延迟，建立 TCP 连接时三次握手延迟</li><li>多个请求跑在一个通道中，出现了丢包情况整个 TCP 所有请求都需要等待重传，所以此时反而不如 HTTP/1 了，http/1 只影响一个请求</li></ul></li></ul><h3 id="http-3" tabindex="-1">HTTP/3 <a class="header-anchor" href="#http-3" aria-label="Permalink to &quot;HTTP/3&quot;">​</a></h3><p>Google 的基于 UDP 的 QUIC 协议（Quick UDP Internet Connection），HTTP-over-QUIC 即 HTTP3</p><ul><li>QUIC 基于 UDP，所以不需要握手挥手，而且 QUIC 也实现了流控制和可靠传输，实现了快速握手之后就可以实现 0-RTT 或者 1-RTT 建立连接，大大提升首次打开页面的速度</li><li>集成了 TLS 加密功能，减少了加密握手的过程</li><li>向前纠错机制 <ul><li>只有少量包出错时不用重传，直接通过其他包的冗余数据组装即可（这样也降低了一次可以传输的数据量上限）</li></ul></li><li>一次握手过程 <ul><li>客户端 hello：包含了支持的加密算法、密钥材料、连接参数等</li><li>服务端 hello 和应答：包含了服务器支持的加密算法、密钥材料等</li><li>开始数据传输：客户端收到响应后如果一切正常就可以直接开始发送数据</li><li>预共享密钥材料</li></ul></li></ul><h3 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h3><p>https</p><ul><li>四次握手 <ul><li>客户端要求建立 ssl 连接</li><li>服务器收到后发送包含公钥的证书（如果没有证书就可能发生中间人攻击，即中间人截留公钥，发送伪造的公钥给客户端，然后获取私钥，然后用自己伪造公钥对应的私钥的解密，然后发给服务器，服务器就会用假的密钥进行通信）</li><li>客户端收到后检查证书（系统集成的证书颁发公司的公钥进行检查，证书颁发公司用私钥进行加密）及过期时间，没有问题则随机产生一个密钥，利用公钥将会话密钥加密并传送给服务端</li><li>服务端用私钥解密会话密钥，并发送 finished 消息，表示握手完成 非对称加密传输密钥，对称加密传输内容 基于 HTTP/2 的 Web 优化</li></ul></li><li>减少 DNS 查询，DNS-prefetch 预取，这样浏览器就会缓存这个解析 <ul><li>浏览器解析 HTML 文档时遇到包含外部资源的标签（link、script、img）会启动 DNS 解析</li><li>使用 DNS-prefetch 在正式请求之前提前预取 DNS 解析结果并缓存</li></ul></li></ul><p><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://example.com&quot;&gt;</code></p><ul><li>减少不必要的 HTTP 跳转</li><li>使用 CDN 分发资源</li><li>客户端缓存资源</li><li>http2 可以控制优先级来进行优化</li><li>http1 会使用雪碧图，把图片进行 base64 编码，使用多个域名提升并发连接上限 攻击及防护</li><li>csrf 跨站请求伪造：跳转到攻击者指定的连接，被获取了 cookie，来通过身份验证 <ul><li>可以使用 token</li><li>同源策略</li><li>双重 cookie</li></ul></li><li>xss 跨站脚本攻击 <ul><li>存储型：将脚本上传到数据库 <ul><li>严格验证用户输入内容</li><li>进行转义</li></ul></li><li>反射型：通过 URL 参数、表单等注入脚本 <ul><li>输入输出进行转义</li></ul></li><li>DOM 型 <ul><li>进行转义</li></ul></li><li>CSP Content Safe Policy，内容安全策略，设置白名单</li><li>对文本进行转义</li></ul></li><li>中间人攻击</li></ul>',26)]))}const P=i(o,[["render",r]]);export{c as __pageData,P as default};
