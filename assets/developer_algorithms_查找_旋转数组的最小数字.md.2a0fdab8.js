import{_ as e,c as a,o as t,d}from"./app.9fffff5c.js";const u=JSON.parse('{"title":"旋转数组的最小数字","description":"","frontmatter":{"title":"旋转数组的最小数字","lastUpdated":true},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"relativePath":"developer/algorithms/查找/旋转数组的最小数字.md","lastUpdated":1683355034000}'),i={name:"developer/algorithms/查找/旋转数组的最小数字.md"},r=d('<h1 id="旋转数组的最小数字" tabindex="-1">旋转数组的最小数字 <a class="header-anchor" href="#旋转数组的最小数字" aria-hidden="true">#</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-hidden="true">#</a></h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。例如数组 <code>[3, 4, 5, 1, 2]</code> 为 <code>[1, 2, 3, 4, 5]</code> 的一个旋转，该数组最小值为 1</p><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-hidden="true">#</a></h2><p>思路一：既然是非减排序的旋转，那直接找最大值，或者最小值</p><p>二分查找拼接点 mid = a.length -1 high = 0 a[mid] &gt; a[high] 拼接点在右侧 a[mid] &lt; a[high] 拼接点在左侧 a[mid] === a[high] 则需要一个一个尝试</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-hidden="true">#</a></h2>',7),h=[r];function l(n,s,_,c,o,p){return t(),a("div",null,h)}const g=e(i,[["render",l]]);export{u as __pageData,g as default};
