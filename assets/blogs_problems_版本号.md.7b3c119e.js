import{_ as e,c as t,o as a,d}from"./app.90c1412e.js";const m=JSON.parse('{"title":"版本号","description":"","frontmatter":{"title":"版本号","lastUpdated":true},"headers":[{"level":2,"title":"递增逻辑","slug":"递增逻辑","link":"#递增逻辑","children":[]},{"level":2,"title":"npm 指定版本范围","slug":"npm-指定版本范围","link":"#npm-指定版本范围","children":[]}],"relativePath":"blogs/problems/版本号.md","lastUpdated":1695209990000}'),o={name:"blogs/problems/版本号.md"},c=d('<h1 id="版本号" tabindex="-1">版本号 <a class="header-anchor" href="#版本号" aria-hidden="true">#</a></h1><p>X.Y.Z major.minor.patch 主版本号.次版本号.修订号</p><p>三个版本号都是非负整数，且禁止在数字前补 0，版本升级应该依次递增</p><p>例如：1.9.0 -&gt; 1.10.0 -&gt; 1.11.0</p><p>主版本号为 0 (0.y.z) 代表处于开发初始阶段，一切都可能随时更变</p><p>1.0.0 版本用于界定公共 API 形成</p><h2 id="递增逻辑" tabindex="-1">递增逻辑 <a class="header-anchor" href="#递增逻辑" aria-hidden="true">#</a></h2><ul><li><p>主版本号：不兼容的 API 或者破坏性更改时，升级主版本号</p></li><li><p>次版本号：向后兼容添加功能时，升级次版本号</p></li><li><p>修订号：向后兼容修复缺陷时，升级修订号</p></li></ul><p><strong>先行版 低于标准版 1.0.0-alpha.6 &lt; 1.0.0</strong></p><p>一般软件从 0.1.0 版本开始</p><p>alpha 表示内部测试版，给开发和测试找 bug 使用 beta 表示公开测试版 rc (Release Candidate 候选版本) 可以提前尝试一些功能，预览版，可能改动一些小 bug 后就合并到正式版本</p><h2 id="npm-指定版本范围" tabindex="-1">npm 指定版本范围 <a class="header-anchor" href="#npm-指定版本范围" aria-hidden="true">#</a></h2><p><code>^</code>: 次版本号更新，<code>^1.2.3</code> ---&gt; <code>&gt;=1.2.3 &lt;2.0.0</code></p><p><code>~</code>: 如果指定了次版本号则进行修订号更新，如果没有则进行次版本号更新 <code>~1.2.3</code> ---&gt; <code>&gt;=1.2.3 &lt;1.3.0</code><code>~1.2</code> ---&gt; <code>&gt;=1.2.0 &lt; 1.3.0</code> 相当于 <code>1.2.x</code><code>~1</code> ---&gt; <code>&gt;=1.0.0 &lt;2.0.0</code> 相当于 <code>1.x</code></p>',14),p=[c];function l(r,n,i,s,_,h){return a(),t("div",null,p)}const u=e(o,[["render",l]]);export{m as __pageData,u as default};
