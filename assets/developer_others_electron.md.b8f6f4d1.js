import{_ as s,c as e,o as n,d as a}from"./app.9fffff5c.js";const C=JSON.parse('{"title":"Electron","description":"","frontmatter":{"title":"Electron","lastUpdated":true},"headers":[{"level":2,"title":"Processes in Electron","slug":"processes-in-electron","link":"#processes-in-electron","children":[{"level":3,"title":"流程模型","slug":"流程模型","link":"#流程模型","children":[]},{"level":3,"title":"上下文隔离 contextIsolation","slug":"上下文隔离-contextisolation","link":"#上下文隔离-contextisolation","children":[]},{"level":3,"title":"进程间通信","slug":"进程间通信","link":"#进程间通信","children":[]},{"level":3,"title":"进程沙盒化","slug":"进程沙盒化","link":"#进程沙盒化","children":[]},{"level":3,"title":"Electron 中的消息端口","slug":"electron-中的消息端口","link":"#electron-中的消息端口","children":[]}]},{"level":2,"title":"Best Practices","slug":"best-practices","link":"#best-practices","children":[]},{"level":2,"title":"Renderer Process 模块","slug":"renderer-process-模块","link":"#renderer-process-模块","children":[{"level":3,"title":"clipboard","slug":"clipboard","link":"#clipboard","children":[]},{"level":3,"title":"contextBridge","slug":"contextbridge","link":"#contextbridge","children":[]},{"level":3,"title":"crashReporter","slug":"crashreporter","link":"#crashreporter","children":[]},{"level":3,"title":"desktopCapturer","slug":"desktopcapturer","link":"#desktopcapturer","children":[]},{"level":3,"title":"ipcRenderer","slug":"ipcrenderer","link":"#ipcrenderer","children":[]},{"level":3,"title":"nativeImage","slug":"nativeimage","link":"#nativeimage","children":[]},{"level":3,"title":"webFrame","slug":"webframe","link":"#webframe","children":[]}]}],"relativePath":"developer/others/electron.md","lastUpdated":1683355034000}'),o={name:"developer/others/electron.md"},l=a(`<h1 id="electron" tabindex="-1">electron <a class="header-anchor" href="#electron" aria-hidden="true">#</a></h1><h2 id="processes-in-electron" tabindex="-1">Processes in Electron <a class="header-anchor" href="#processes-in-electron" aria-hidden="true">#</a></h2><h3 id="流程模型" tabindex="-1">流程模型 <a class="header-anchor" href="#流程模型" aria-hidden="true">#</a></h3><p>继承了来自 Chromium 的多进程架构</p><p>每个 Electron 应用都有一个单一的主进程，作为程序的入口点，主进程在 Node.js 环境中运行，这意味着它可以使用 <code>require</code> 模块和 Node.js 的所有 API</p><h4 id="主进程" tabindex="-1">主进程 <a class="header-anchor" href="#主进程" aria-hidden="true">#</a></h4><ul><li>窗口管理</li></ul><p>主进程的主要目的是用 <code>BrowserWindow</code> 模块创建和管理应用程序窗口 <code>BrowserWindow</code> 类的每个实例创建一个应用程序窗口，且在单独的渲染进程中加载一个网页，可以从主进程用 window 的 <code>webContent</code> 对象与网页内容进行交互</p><p>渲染器进程也是为 web embeds（web 嵌入） 而被创建的</p><p>由于 <code>BrowserWindow</code> 模块是一个 <strong>EventEmitter（事件侦听器？可以侦听事件？）</strong>，所以可以为各种用户事件添加处理程序</p><p>当一个 <code>BrowserWindow</code> 实例被销毁时，与其对应的渲染器进程也会被终止</p><ul><li><p>应用程序生命周期 主进程还能通过 Electron 的 <code>app</code> 模块来控制应用程序的生命周期，这个模块提供了大量用来添加自定义应用行为的事件和方法</p></li><li><p>原生 API 为了使 Electron 的功能不仅仅限于网页内容的封装，主进程额添加了自定义的 API 来与用户的系统进行交互，完整列表请参阅 <a href="https://#" target="_blank" rel="noreferrer">API 文档</a></p></li></ul><h4 id="渲染器进程" tabindex="-1">渲染器进程 <a class="header-anchor" href="#渲染器进程" aria-hidden="true">#</a></h4><p>渲染器无权直接访问 <code>require</code> 或其他 Node.js API。为了在渲染器中直接包含 NPM 模块，必须使用与在 Web 开发时相同的打包工具</p><p>注意 <em>以前是可以引用整个 Node.js 的，但是处于安全原因禁止了</em></p><p>事实上，<strong>确实没有直接导入 Electron 内容脚本的方法</strong></p><h4 id="preload-脚本" tabindex="-1">Preload 脚本 <a class="header-anchor" href="#preload-脚本" aria-hidden="true">#</a></h4><p>预加载脚本中包含了那些执行于渲染器进程中，且先于网页内容开始加载的代码，这些脚本虽然运行于渲染器环境中，却因能访问 Node.js API 而拥有更多的权限</p><p>预加载脚本可以在 <code>BrowserWindow</code> 构造方法中的 <code>webPreferences</code> 选项里被附加到主进程。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> BrowserWindow </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">electron</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> win </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">webPreferences</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">preload</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path/to/preload.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>预加载脚本与浏览器<strong>共享同一个全局 <code>Window</code> 接口，并且可以访问 Node.js API，所以它通过在全局 <code>window</code> 中暴露任意 API 来增强渲染器，以便网页内容使用</strong>，但是不能直接附加任何变动到 <code>window</code> 上，因为 <code>contextIsolation</code> 是默认的，<strong>预加载脚本和渲染器主要运行环境是隔离开的，以避免泄露任何具有特权的 API 到网页内容代码</strong>，<strong>可以使用 <code>contextBridge</code> 模块来安全地实现交互</strong></p><p><strong>使用 <code>contextBridge</code> 模块来安全地实现交互</strong><code>contextBridge.exposeInMainWorld</code> 不能用来绑定顶层变量 window 已有的属性（不能和 window 已有变量重复）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// preload.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> contextBridge </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">electron</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">contextBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exposeInMainWorld</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">propName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">anyTypeValue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这个功能很有用</p><p>可以通过<strong>进程间通讯（inter-process communication，IPC）任务</strong>来从渲染器触发主进程，反之亦然</p><h3 id="上下文隔离-contextisolation" tabindex="-1">上下文隔离 contextIsolation <a class="header-anchor" href="#上下文隔离-contextisolation" aria-hidden="true">#</a></h3><p><strong>上下文隔离确保预加载脚本和 Electron 内部逻辑运行在所加载的 <code>webcontent</code> 网页之外的另一个独立上下文环境中</strong>，有助于阻止网站访问 Electron 内部组件和预加载脚本可访问的高等级权限 API</p><p>Electron 12 后默认开启上下文隔离</p><p>没有上下文隔离可以在预加载脚本直接使用 <code>window.XXX = &#39;xxx&#39;</code> 然后渲染器进程直接读取 XXX 值</p><p>有上下文隔离之后需要使用 <code>contextBridge</code> 模块，<strong>不建议直接暴露高等级权限 API</strong></p><h4 id="typescript-中使用" tabindex="-1">TypeScript 中使用 <a class="header-anchor" href="#typescript-中使用" aria-hidden="true">#</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// renderer.d.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IElectronAPI</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">loadPreferences</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> global </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Window</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		electronAPI</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">IElectronAPI</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="进程间通信" tabindex="-1">进程间通信 <a class="header-anchor" href="#进程间通信" aria-hidden="true">#</a></h3><h4 id="渲染器到主进程-单向" tabindex="-1">渲染器到主进程（单向） <a class="header-anchor" href="#渲染器到主进程-单向" aria-hidden="true">#</a></h4><p><em>将单向 IPC 信息从渲染器进程发送到主进程，用 <code>ipcRender.send</code> 发送消息，用 <code>ipcMain.on</code> 接收</em></p><p>main.js 中监听事件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">title</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">webContents</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sender</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 拿到发消息的 web 嵌入</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">win</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BrowserWindow</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromWebContents</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">webContents</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 根据嵌入找到对应的 window</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">win</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTitle</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 调用 window 的 API</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">ipcMain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">set-title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handler)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>preload.js 中用 <code>contextBridge.exposeInMainWorld</code> 暴露 <code>ipcRenderer.send()</code> 接口，<strong>出于安全考虑，不要暴露完整接口</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">contextBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exposeInMainWorld</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">electronAPI</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">setTitle</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">title</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> ipcRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">set-title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> title)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>render.js 中使用接口</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">electronAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTitle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">newTitle</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h4 id="渲染器到主进程-双向" tabindex="-1">渲染器到主进程（双向） <a class="header-anchor" href="#渲染器到主进程-双向" aria-hidden="true">#</a></h4><p><em>双向 IPC 通常是从渲染器进程代码调用主进程模块并等待结果，使用 <code>ipcRenderer.invoke</code> 和 <code>ipcMain.handle</code> 完成</em></p><p>老版本可以用 <code>ipcRenderer.send</code> 来做</p><h4 id="主进程到渲染器" tabindex="-1">主进程到渲染器 <a class="header-anchor" href="#主进程到渲染器" aria-hidden="true">#</a></h4><p>使用 <code>webContents</code> 模块从主进程发送消息给目标渲染进程</p><p><strong>preload 脚本中也可以获取操作 DOM，不过最好在 window 的 DOMContentLoaded 中操作，确保 DOM 在页面上</strong></p><p>如果 preload 和 renderer 中都监听了该消息，会在 renderer 中先触发回调，preload 中后触发</p><h4 id="渲染器进程到渲染器进程" tabindex="-1">渲染器进程到渲染器进程 <a class="header-anchor" href="#渲染器进程到渲染器进程" aria-hidden="true">#</a></h4><p>没有直接方法可以使用 <code>ipcMain</code> 和 <code>ipcRenderer</code> 模块在 Electron 中的渲染器进程之间发送消息，可以间接做</p><ul><li>将主进程作为渲染器之间的消息代理，一个渲染器发送消息给主进程，主进程转发给另一个渲染器</li><li>从主进程将一个 <code>MessagePort</code> 传递到两个渲染器，这将允许初始设置后渲染器之间直接进行通信</li></ul><p><strong>Electron 的 IPC 实现使用 HTML 标准的 结构化克隆算法来序列化进程之间传递的对象，这意味着只有某些类型的对象可以通过 IPC 通道传递， DOM 对象、Node.js 中的 C++ 类支持的对象、Electron 中 C++ 类支持的对象，无法使用结构化克隆序列化</strong></p><h3 id="进程沙盒化" tabindex="-1">进程沙盒化 <a class="header-anchor" href="#进程沙盒化" aria-hidden="true">#</a></h3><p>Chromium 的一个关键安全特性是，进程可以在沙盒中执行，沙盒通过限制对大多数系统资源的访问来减少恶意代码可能造成的伤害--沙盒化的进程只能自由使用 CPU 周期和内存，为了执行需要额外权限的操作，沙盒处的进程哦通过专用信息渠道将任务下放给更大权限的进程</p><p>在 Chromium 中，沙盒化应用与主进程以外的大多数进程，包括 渲染器进程，以及功能性进程如音频服务、GPU 服务和网络服务</p><p>从 Electron 20 开始，不需要任何进一步配置沙盒就会被应用于渲染器进程</p><h4 id="electron-中的沙盒行为" tabindex="-1">Electron 中的沙盒行为 <a class="header-anchor" href="#electron-中的沙盒行为" aria-hidden="true">#</a></h4><p>Electron 中的渲染器进程被沙盒化时，它们的行为与常规的 Chrome 渲染器一样，一个沙盒化的渲染器不会有一个 Node.js 环境</p><p>在沙盒中，渲染器只能通过 <strong>进程间通讯（inter-process communication, IPC）</strong> 委派任务给主进程的方式来执行需要权限的任务，例如文件系统的交互，对系统更改等</p><p><strong>为了让渲染器进程能与主进程通信，附属于沙盒化的渲染进程的 preload 脚本中仍可以使用一部分以 Polyfill（填充） 形式的 Node.js API。有一个与 Node.js 中类似的 <code>require</code> 函数被提供了出来，但是只能载入 Electron 和 Node 内置模块的一个子集</strong> electron(仅限渲染器进程模块) 事件 timers url</p><p>此外，Node.js 的基础对象也填充到了 preload 脚本的全局上下文中 Buffer process clearImmediate setImmediate</p><p><code>require</code> 函数只是一个功能有限的 Ployfill 实现，并不支持把 preload 脚本拆分为多个文件然后作为 CommonJS 模块来加载，若需要拆分 preload 脚本代码，可以使用 webpack 等打包工具</p><h4 id="配置沙箱" tabindex="-1">配置沙箱 <a class="header-anchor" href="#配置沙箱" aria-hidden="true">#</a></h4><p>可以为特定的进程禁用沙箱，但是会带来安全风险</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> win </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">webPreferences</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">sandobx</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>只要在渲染器进程中使用 Node 集成，沙箱就会被禁用，新版本<strong>如果要在渲染器进程直接使用 Node(如 process)，还需要设置 <code>contextIsolation: false</code>，但是这样就不能使用 contextBridge 模块</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> win </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">webPreferences</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">nodeIntegration</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">contextIsolation</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在 ready 事件之前全局启动沙盒，强制沙盒化所有渲染器进程</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enableSandbox</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="electron-中的消息端口" tabindex="-1">Electron 中的消息端口 <a class="header-anchor" href="#electron-中的消息端口" aria-hidden="true">#</a></h3><p><code>MessagePort</code> 是一个允许在不同上下文之间传递消息的 Web 功能，就像 <code>window.postMessage</code>，Web Worker 可以使用它</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-hidden="true">#</a></h2><h2 id="renderer-process-模块" tabindex="-1">Renderer Process 模块 <a class="header-anchor" href="#renderer-process-模块" aria-hidden="true">#</a></h2><h3 id="clipboard" tabindex="-1">clipboard <a class="header-anchor" href="#clipboard" aria-hidden="true">#</a></h3><h3 id="contextbridge" tabindex="-1">contextBridge <a class="header-anchor" href="#contextbridge" aria-hidden="true">#</a></h3><h3 id="crashreporter" tabindex="-1">crashReporter <a class="header-anchor" href="#crashreporter" aria-hidden="true">#</a></h3><h3 id="desktopcapturer" tabindex="-1">desktopCapturer <a class="header-anchor" href="#desktopcapturer" aria-hidden="true">#</a></h3><h3 id="ipcrenderer" tabindex="-1">ipcRenderer <a class="header-anchor" href="#ipcrenderer" aria-hidden="true">#</a></h3><h3 id="nativeimage" tabindex="-1">nativeImage <a class="header-anchor" href="#nativeimage" aria-hidden="true">#</a></h3><h3 id="webframe" tabindex="-1">webFrame <a class="header-anchor" href="#webframe" aria-hidden="true">#</a></h3>`,79),p=[l];function t(r,c,i,d,D,y){return n(),e("div",null,p)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
