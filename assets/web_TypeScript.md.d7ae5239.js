import{_ as s,c as a,o as n,d as l}from"./app.256f9cb4.js";const F=JSON.parse('{"title":"TypeScript","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"基础使用","slug":"基础使用","link":"#基础使用","children":[{"level":3,"title":"基础类型","slug":"基础类型","link":"#基础类型","children":[]},{"level":3,"title":"新增类型","slug":"新增类型","link":"#新增类型","children":[]}]},{"level":2,"title":"高级用法","slug":"高级用法","link":"#高级用法","children":[{"level":3,"title":"函数重载","slug":"函数重载","link":"#函数重载","children":[]},{"level":3,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":3,"title":"内置的高级函数","slug":"内置的高级函数","link":"#内置的高级函数","children":[]},{"level":3,"title":"协变 & 逆变","slug":"协变-逆变","link":"#协变-逆变","children":[]}]},{"level":2,"title":"实践场景","slug":"实践场景","link":"#实践场景","children":[]},{"level":2,"title":"周边工具","slug":"周边工具","link":"#周边工具","children":[]}],"relativePath":"web/TypeScript.md","lastUpdated":1678287685000}'),o={name:"web/TypeScript.md"},e=l(`<h1 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#介绍">介绍</a></li><li><a href="#基础使用">基础使用</a><ul><li><a href="#基础类型">基础类型</a></li><li><a href="#新增类型">新增类型</a></li></ul></li><li><a href="#高级用法">高级用法</a><ul><li><a href="#函数重载">函数重载</a></li><li><a href="#泛型">泛型</a></li><li><a href="#内置的高级函数">内置的高级函数</a></li><li><a href="#协变-逆变">协变 &amp; 逆变</a></li></ul></li><li><a href="#实践场景">实践场景</a></li><li><a href="#周边工具">周边工具</a></li></ul></nav><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h2><p><code>TypeScript</code> 是 <code>JavaScript</code> 的超集，任何合法的 <code>JavaScript</code> 代码在 <code>TypeScript</code> 中都是合法的</p><p>在 <code>TS</code> 流行之前也有其他辅助工具能做类型提示，比如 <code>Flow</code> 、<code>JSDoc</code>，<code>Flow</code> 写法也类似于 <code>TS</code></p><p>静态类型检查在一开始就防止代码出现错误</p><p>tsc 转译后的代码会擦除类型并进行降级处理</p><h2 id="基础使用" tabindex="-1">基础使用 <a class="header-anchor" href="#基础使用" aria-hidden="true">#</a></h2><h3 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-hidden="true">#</a></h3><p><code>JS</code> 中支持的类型在 <code>TS</code> 中也支持，并且 <code>TS</code> 具有类型自动推断能力，使用 <code>const</code> 或 <code>let</code> 声明变量时如果直接赋值，当前变量的就自动赋值对应类型</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// let bool: boolean</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">666</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// let num: number</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> bool </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// let bool: boolean</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> undef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// let undef: undefined</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nul </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// let nul: null</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// let sym: symbol</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// const fn: () =&gt; number</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// let res: number</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">aa</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// let arr: (string | number)[]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">const obj: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  a: number;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  b: boolean;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span></code></pre></div><p><strong>如果 <code>undefined</code> 和 <code>null</code> 自动被推断成 <code>any</code> ，则是 <code>config.json</code> 中需要把 <code>compilerOptions.strictNullChecks</code> 设置为 <code>true</code></strong>，也可以直接 <code>strict:true</code> 开启全部严格性设置</p><h3 id="新增类型" tabindex="-1">新增类型 <a class="header-anchor" href="#新增类型" aria-hidden="true">#</a></h3><ul><li>元组：tuple 表示一个<strong>已知元素数量和类型的数组</strong>，各元素类型不必相同 比如 useState 的返回值就是一个元组类型，数组第一项是一个变量的类型，第二项是一个函数</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> tuple</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">tuple </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">tuple </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Error</span></span>
<span class="line"></span></code></pre></div><ul><li><p>枚举: enum 既可以当成类型使用，也可以当成值使用，如果不给枚举指定值，它会从 0 开始累加</p><p>用 <code>object as const</code> 来实现 <code>enum</code> 的功能</p></li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ValueOf</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">keyof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">Red</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">Green</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">Blue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TColor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">keyof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> Color</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TColorValue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VauleOf</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#A6ACCD;"> Color</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TColorValue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Color</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Green</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><p>any: <strong>所有类型都可以赋值给 <code>any</code> ，也可以把 <code>any</code> 类型赋值给除 <code>never</code> 外的所有类型</strong></p></li><li><p>unknow: 用途和 any 很相似，可以看成一个安全版的 any ，所以推荐在编码中使用 unknow 替换 any ，所有类型都可以赋值给 unknow，</p></li><li><p>never:</p></li></ul><h2 id="高级用法" tabindex="-1">高级用法 <a class="header-anchor" href="#高级用法" aria-hidden="true">#</a></h2><h3 id="函数重载" tabindex="-1">函数重载 <a class="header-anchor" href="#函数重载" aria-hidden="true">#</a></h3><h3 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-hidden="true">#</a></h3><h3 id="内置的高级函数" tabindex="-1">内置的高级函数 <a class="header-anchor" href="#内置的高级函数" aria-hidden="true">#</a></h3><h3 id="协变-逆变" tabindex="-1">协变 &amp; 逆变 <a class="header-anchor" href="#协变-逆变" aria-hidden="true">#</a></h3><h2 id="实践场景" tabindex="-1">实践场景 <a class="header-anchor" href="#实践场景" aria-hidden="true">#</a></h2><h2 id="周边工具" tabindex="-1">周边工具 <a class="header-anchor" href="#周边工具" aria-hidden="true">#</a></h2>`,25),p=[e];function t(c,r,y,i,C,D){return n(),a("div",null,p)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
