import{_ as i,c as a,a2 as t,o as l}from"./chunks/framework.DOgdC_ou.js";const c=JSON.parse('{"title":"CRLF & LF","description":"","frontmatter":{"title":"CRLF & LF","editLink":1233,"lastUpdated":true},"headers":[],"relativePath":"developer/others/lineFeed.md","filePath":"developer/others/lineFeed.md","lastUpdated":1729515322000}'),e={name:"developer/others/lineFeed.md"};function n(p,s,h,k,r,o){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="crlf-lf" tabindex="-1">CRLF &amp; LF <a class="header-anchor" href="#crlf-lf" aria-label="Permalink to &quot;CRLF &amp; LF&quot;">​</a></h1><h2 id="回车和换行" tabindex="-1">回车和换行 <a class="header-anchor" href="#回车和换行" aria-label="Permalink to &quot;回车和换行&quot;">​</a></h2><p>carriage return 换行：line feed</p><p>最早的机械英文打字机，“车”是指纸车，带着纸一起左右移动的模块，每行打第一个字之前，需要把纸车拉到最右边，上紧弹簧，打一个字符弹簧把纸车拉回去一点，打完一行后纸车就完全收回了，所以叫回车，换行意思就是，打字机左边有个把手，扳动纸就会上移一行 后来的电传打字机也有类似的问题</p><ul><li><strong>Unix 系统里，每行结尾只有 “&lt;换行&gt;”，即 “\\n”</strong></li><li><strong>Windows 系统每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“\\r\\n”</strong></li><li><strong>Mac 系统最早每行结尾是“回车”，现在也和 Unix 系统统一了，（macOS 和 the classic Mac OS）</strong></li></ul><p>所以直接后果就是：<strong>Unix/Mac 系统下的文件在 Windows 里打开，所有文字会变成一行，Windows 里的文件在 Unix/Mac 下打开，每行会多出一个 ^M 符号，（现在 git、ws_ftp 等都可以自动对换行符做转换），前端 ESLint 也会提示</strong></p><h2 id="项目处理" tabindex="-1">项目处理 <a class="header-anchor" href="#项目处理" aria-label="Permalink to &quot;项目处理&quot;">​</a></h2><ul><li>项目开发人员使用 Mac 和 Windows 设备共同开发</li></ul><p>通过 VSCode 处理此问题，可以保证 win 拉取代码都不需要再过多格式处理，拉取下来就可以直接跑项目</p><p><strong>全部统一使用 lf 结尾是处于两点原因考虑：1.Mac（开发） CentOS（部署） Linux 都是以 <code>\\n</code> 换行 2.大部分脚手架创建项目都是 lf 格式</strong></p><ol><li>添加 .vscode/settings.json 文件，跟着项目一起上传到 git，并且 git 的 config 进行修改（默认是 true，会自动转化）</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typescript.tsdk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node_modules</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">typescript</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用项目的 TS 版本，而不是 VSCode 的 TS 版本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;files.eol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 保证创建新文件都是以 lf 换行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li><p>终端运行 <code>git config --global core.autocrlf false</code> 关闭 git 拉代码自动转换 lf 和 crlf 功能</p></li><li><p>.eslintrc.js</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;linebreak-style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unix&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ol start="4"><li>.prettierrc.js</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  endOfLine: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>如果现有项目中文件的格式 crlf 和 lf 不统一，可以使用 <code>npx prettiers --write ./src</code> 来全部改写</p><ul><li>项目没有注意时 ESLint 和 prettier 规则冲突</li></ul><p>这种情况下可以通过添加规则 <code>linebreak-style</code> 等，或者引入插件处理</p><p>参考文章 <a href="https://www.ruanyifeng.com/blog/2006/04/post_213.html" target="_blank" rel="noreferrer">阮一峰的网络日志：回车和换行</a></p>`,20)]))}const g=i(e,[["render",n]]);export{c as __pageData,g as default};
