import{_ as i,c as l,o as e,d as t}from"./app.9f00edf1.js";const g=JSON.parse('{"title":"设计模式","description":"","frontmatter":{"title":"设计模式","lastUpdated":true},"headers":[{"level":2,"title":"道 与 术","slug":"道-与-术","link":"#道-与-术","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"relativePath":"developer/designpattern/index.md","lastUpdated":1704785209000}'),p={name:"developer/designpattern/index.md"},a=t('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-hidden="true">#</a></h1><p>《设计模式：可服用面向对象软件的基础》</p><p>在软件工程中，设计模式是对软件设计中普遍存在的各种问题所提出的<strong>解决方案</strong></p><h2 id="道-与-术" tabindex="-1">道 与 术 <a class="header-anchor" href="#道-与-术" aria-hidden="true">#</a></h2><p>面向编程和面向对象设计的五个基本原则，JavaScript 中主要围绕 单一功能 和 开放封闭 两个原则展开</p><ul><li>SOLID 设计原则 <ul><li>Single Responsibilitty Principle, 单一功能原则</li><li>Opened Closed Principle, 开发封闭原则</li><li>Liskov Substitution Principle, 里式替换原则</li><li>Interface Segregation Principle, 接口隔离原则</li><li>Dependency Inversion Principle, 依赖反转原则</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">为什么要使用设计模式? - 封装变化</p><p>实现功能之余要考虑可维护性、可扩展性，所以我们要尽量将代码的变与不变部分分离，确保变化的部分灵活，不变的地方稳定，这样来写出健壮的代码</p></div><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-hidden="true">#</a></h2><ul><li><p>创建型</p><ul><li>工厂模式</li><li>抽象工厂模式</li><li>原型模式</li><li>单例模式</li><li>构造器模式</li></ul></li><li><p>结构型</p><ul><li>装饰器模式</li><li>适配器模式</li><li>代理模式</li><li>桥接模式</li><li>外观模式</li><li>组合模式</li><li>享元模式</li></ul></li><li><p>行为型</p><ul><li><p><a href="/blog/developer/designpattern/ObserverPattern.html">观察者模式</a></p></li><li><p><a href="/blog/developer/designpattern/发布订阅模式.html">发布订阅模式</a></p></li><li><p>策略模式</p></li><li><p>状态模式</p></li><li><p>迭代器模式</p></li><li><p>解释器模式</p></li><li><p>中介者模式</p></li><li><p>访问者模式</p></li><li><p>备忘录模式</p></li><li><p>模板方法模式</p></li><li><p>职责链模式</p></li><li><p>命令模式</p></li></ul></li></ul><p>此外，并不是 GOF 提出的 23 种经典设计模式可以被称之为设计模式，只要一个方案遵循设计原则，解决一类问题，就都可以称之为一个设计模式</p>',10),r=[a];function n(d,s,o,c,h,u){return e(),l("div",null,r)}const v=i(p,[["render",n]]);export{g as __pageData,v as default};
