import{_ as a,c as i,a2 as n,o as p}from"./chunks/framework.DOgdC_ou.js";const c=JSON.parse('{"title":"包管理工具","description":"","frontmatter":{"title":"包管理工具","lastUpdated":true},"headers":[],"relativePath":"blogs/notes/包管理工具.md","filePath":"blogs/notes/包管理工具.md","lastUpdated":1729515322000}'),e={name:"blogs/notes/包管理工具.md"};function t(l,s,h,o,d,k){return p(),i("div",null,s[0]||(s[0]=[n(`<h1 id="包管理工具" tabindex="-1">包管理工具 <a class="header-anchor" href="#包管理工具" aria-label="Permalink to &quot;包管理工具&quot;">​</a></h1><h2 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;npm&quot;">​</a></h2><p>早期 v2 版本，依赖包重复安装，嵌套层级太深</p><p>v3 版本提出了目录扁平化，将第一次安装的某个版本提升到顶层，其他版本无法提升到顶层就不变，缓解了嵌套层级太深的问题 但是产生了幽灵依赖问题、双胞胎陌生人问题（B v1 被提升到顶层，下面两个包都依赖 B v2，则依旧会重复安装 B v2，哪个包提升到顶层也和安装顺序有关，并不稳定，依赖不幂等） 为了解决依赖不幂等的问题，就使用了锁文件的方案，yarn 最早提出（yarn.lock package-lock.json)</p><h2 id="yarn" tabindex="-1">yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;yarn&quot;">​</a></h2><p>yarn 也存在幽灵依赖问题，但是多个版本包更智能</p><h2 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;pnpm&quot;">​</a></h2><p>解决了幽灵依赖问题</p><p>hard link：pnpm 安装过程中会在全局的 store 目录中存储依赖包，然后在项目对应的 node_modules 中创建相应的硬链接</p><p>存在兼容性问题，或者某些 npm 包中写死了引用路径，可能会导致出错，而且依赖包在全局 store 中维护，修改调试时所有工程都会受影响</p><p>pnpm 的包结构树更清晰</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 包实际存储位置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> path</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 清除全局无用的包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从 npm 迁移到 pnpm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 部分命令也需要从 npm 改为 pnpm</span></span></code></pre></div><p>在项目里指定团队成员只能使用 pnpm 包管理器，在 <code>package.json</code> 中限制</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;preinstall&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npx only-allow pnpm&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>pnpm ci</code> 会先删除项目的 <code>node_modules</code> 再安装，不会更新 <code>lock</code> 文件，完全按照 <code>package-lock.json</code> 进行安装</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ci</span></span></code></pre></div>`,16)]))}const g=a(e,[["render",t]]);export{c as __pageData,g as default};
