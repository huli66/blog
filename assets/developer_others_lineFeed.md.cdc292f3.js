import{_ as s,c as n,o as a,d as l}from"./app.0403e3e7.js";const C=JSON.parse('{"title":"CRLF & LF","description":"","frontmatter":{"title":"CRLF & LF","editLink":1233,"lastUpdated":true},"headers":[{"level":2,"title":"回车和换行","slug":"回车和换行","link":"#回车和换行","children":[]},{"level":2,"title":"项目处理","slug":"项目处理","link":"#项目处理","children":[]}],"relativePath":"developer/others/lineFeed.md","lastUpdated":1685354469000}'),o={name:"developer/others/lineFeed.md"},e=l(`<h1 id="crlf-lf" tabindex="-1">CRLF &amp; LF <a class="header-anchor" href="#crlf-lf" aria-hidden="true">#</a></h1><h2 id="回车和换行" tabindex="-1">回车和换行 <a class="header-anchor" href="#回车和换行" aria-hidden="true">#</a></h2><p>carriage return 换行：line feed</p><p>最早的机械英文打字机，“车”是指纸车，带着纸一起左右移动的模块，每行打第一个字之前，需要把纸车拉到最右边，上紧弹簧，打一个字符弹簧把纸车拉回去一点，打完一行后纸车就完全收回了，所以叫回车，换行意思就是，打字机左边有个把手，扳动纸就会上移一行 后来的电传打字机也有类似的问题</p><ul><li><strong>Unix 系统里，每行结尾只有 “&lt;换行&gt;”，即 “\\n”</strong></li><li><strong>Windows 系统每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“\\r\\n”</strong></li><li><strong>Mac 系统最早每行结尾是“回车”，现在也和 Unix 系统统一了，（macOS 和 the classic Mac OS）</strong></li></ul><p>所以直接后果就是：<strong>Unix/Mac 系统下的文件在 Windows 里打开，所有文字会变成一行，Windows 里的文件在 Unix/Mac 下打开，每行会多出一个 ^M 符号，（现在 git、ws_ftp 等都可以自动对换行符做转换），前端 ESLint 也会提示</strong></p><h2 id="项目处理" tabindex="-1">项目处理 <a class="header-anchor" href="#项目处理" aria-hidden="true">#</a></h2><ul><li>项目开发人员使用 Mac 和 Windows 设备共同开发</li></ul><p>通过 VSCode 处理此问题，可以保证 win 拉取代码都不需要再过多格式处理，拉取下来就可以直接跑项目</p><p><strong>全部统一使用 lf 结尾是处于两点原因考虑：1.Mac（开发） CentOS（部署） Linux 都是以 <code>\\n</code> 换行 2.大部分脚手架创建项目都是 lf 格式</strong></p><ol><li>添加 .vscode/settings.json 文件，跟着项目一起上传到 git，并且 git 的 config 进行修改（默认是 true，会自动转化）</li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">typescript.tsdk</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">typescript</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">lib</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 使用项目的 TS 版本，而不是 VSCode 的 TS 版本</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">files.eol</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 保证创建新文件都是以 lf 换行</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li><p>终端运行 <code>git config --global core.autocrlf false</code> 关闭 git 拉代码自动转换 lf 和 crlf 功能</p></li><li><p>.eslintrc.js</p></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">linebreak-style</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">unix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><ol start="4"><li>.prettierrc.js</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">endOfLine</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lf</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>如果现有项目中文件的格式 crlf 和 lf 不统一，可以使用 <code>npx prettiers --write ./src</code> 来全部改写</p><ul><li>项目没有注意时 ESLint 和 prettier 规则冲突</li></ul><p>这种情况下可以通过添加规则 <code>linebreak-style</code> 等，或者引入插件处理</p><p>参考文章 <a href="https://www.ruanyifeng.com/blog/2006/04/post_213.html" target="_blank" rel="noreferrer">阮一峰的网络日志：回车和换行</a></p>`,20),p=[e];function t(r,c,i,D,F,y){return a(),n("div",null,p)}const u=s(o,[["render",t]]);export{C as __pageData,u as default};
