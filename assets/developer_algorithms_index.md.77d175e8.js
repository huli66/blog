import{_ as l,c as i,o as e,d as a}from"./app.4474ea09.js";const x=JSON.parse('{"title":"算法","description":"","frontmatter":{"title":"算法","lastUpdated":true},"headers":[{"level":2,"title":"排序","slug":"排序","link":"#排序","children":[]},{"level":2,"title":"分治","slug":"分治","link":"#分治","children":[]},{"level":2,"title":"数学运算","slug":"数学运算","link":"#数学运算","children":[]},{"level":2,"title":"查找","slug":"查找","link":"#查找","children":[]},{"level":2,"title":"DFS 和 BFS","slug":"dfs-和-bfs","link":"#dfs-和-bfs","children":[]},{"level":2,"title":"递归与循环","slug":"递归与循环","link":"#递归与循环","children":[]},{"level":2,"title":"回溯算法","slug":"回溯算法","link":"#回溯算法","children":[]},{"level":2,"title":"动态规划","slug":"动态规划","link":"#动态规划","children":[]},{"level":2,"title":"贪心算法","slug":"贪心算法","link":"#贪心算法","children":[]}],"relativePath":"developer/algorithms/index.md","lastUpdated":1683368961000}'),d={name:"developer/algorithms/index.md"},r=a('<h1 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-hidden="true">#</a></h1><h2 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-hidden="true">#</a></h2><ul><li>复杂度</li><li>排序-概览</li><li>冒泡排序</li><li>插入排序</li><li>选择排序</li><li>堆排序</li><li>快速排序</li><li>归并排序</li></ul><h2 id="分治" tabindex="-1">分治 <a class="header-anchor" href="#分治" aria-hidden="true">#</a></h2><ul><li>数组中的逆序对</li></ul><h2 id="数学运算" tabindex="-1">数学运算 <a class="header-anchor" href="#数学运算" aria-hidden="true">#</a></h2><ul><li>二进制中 1 的个数</li><li>数值的整数次方</li><li>不用加减乘除做加法</li><li>字符串转换整数</li><li>整数中 1 出现的次数</li><li>1 + 2 + 3 + ... + n</li><li>丑数</li></ul><h2 id="查找" tabindex="-1">查找 <a class="header-anchor" href="#查找" aria-hidden="true">#</a></h2><ul><li>查找-概览</li><li>二维数组查找</li><li>排序数组中查找数字</li><li>整数中 1 出现的次数</li></ul><h2 id="dfs-和-bfs" tabindex="-1">DFS 和 BFS <a class="header-anchor" href="#dfs-和-bfs" aria-hidden="true">#</a></h2><ul><li>DFS 和 BFS 概览</li></ul><h2 id="递归与循环" tabindex="-1">递归与循环 <a class="header-anchor" href="#递归与循环" aria-hidden="true">#</a></h2><ul><li>递归-概览</li><li>斐波那契数列</li><li>跳台阶</li><li>变态跳台阶</li><li>钜形覆盖</li></ul><h2 id="回溯算法" tabindex="-1">回溯算法 <a class="header-anchor" href="#回溯算法" aria-hidden="true">#</a></h2><ul><li>回溯-概览</li><li>二叉树中和为某一值的路径</li><li>字符串的排列</li><li>和为 sum 的 n 个数</li><li>矩阵中的路径</li><li>机器人的运动范围</li><li>N 皇后问题</li><li>N 皇后问题 2</li></ul><h2 id="动态规划" tabindex="-1">动态规划 <a class="header-anchor" href="#动态规划" aria-hidden="true">#</a></h2><ul><li>动态规划-概览</li><li>斐波那契数列</li><li>最小路径和</li><li>打家劫舍</li></ul><h2 id="贪心算法" tabindex="-1">贪心算法 <a class="header-anchor" href="#贪心算法" aria-hidden="true">#</a></h2><ul><li>贪心算法-概览</li><li>分发饼干</li></ul>',19),t=[r];function h(n,s,c,u,o,_){return e(),i("div",null,t)}const p=l(d,[["render",h]]);export{x as __pageData,p as default};
